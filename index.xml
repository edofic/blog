<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Programming Escapades</title><link>/</link><description>Recent content on My Programming Escapades</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Andraz Bajt</copyright><lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Rename rebase with git</title><link>/posts/2020-04-20-rebase-rename/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>/posts/2020-04-20-rebase-rename/</guid><description>Want to perform a git rebase in which you rename a file without pesky conflicts?
tl;dr
git filter-branch -f --tree-filter &amp;#34;git mv ORIGINAL_FILE_NAME NEW_FILE_NAME || true&amp;#34; -- $(git merge-base origin/master HEAD)..HEAD git rebase origin/master Ever wanted to rename a file you created/modified in a pull request but also wanted to keep the pristine history you worked hard for? Well tough luck you can either push a new commit to rename it (and keep old commits with the old file name) or resolve a bunch of pointless conflicts.</description></item><item><title>Moving to Hugo</title><link>/posts/2020-01-15-hugo/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>/posts/2020-01-15-hugo/</guid><description>If you've been here before you might notice the site looks different. Indeed I moved my content to yet another platform (first it was blogspot -&amp;gt; hakyll).
I wanted to publish something but I ran into issues: my toolchain did not work. See, I've been doing less Haskell on my machine lately and negligence led into my setup rotting (as I did upgrade my machine quite a bit). Truth be told the infrastructure was not designed to last the test of time.</description></item><item><title>Linear time sorting</title><link>/posts/2018-05-25-linear-time-sorting/</link><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid>/posts/2018-05-25-linear-time-sorting/</guid><description>Did you know that you can sort data in time linear with respect to the lenght of said data? Some people dismiss linear time sorts because they've learned that n log n is the bottom bound for sorting an arbitrary input.
But n log n is optimal!? Let's even sketch out a proof. Any function that sorts an array of elements will in fact figure out a permutation of elements into a sorted order.</description></item><item><title>Integrating Jira into Google Sheets</title><link>/posts/2018-01-25-jira-gsheet/</link><pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate><guid>/posts/2018-01-25-jira-gsheet/</guid><description>So I got a (recurring) task to compile some stats from Jira. You now, some filtering and agregation. Possibly a pivot table and a chart. Sounds like a perfect task for spreadsheets. But Jira doesn't have spreadsheets - at least without addons, but that is not an options for me.
So I decided to use Google Sheets. And figure out a way to automatically fetch data from Jira because there's no way in hell I'm doing that manually every time.</description></item><item><title>NixOS install &amp; labor pains</title><link>/posts/2018-01-24-nixos-install-pains/</link><pubDate>Wed, 24 Jan 2018 00:00:00 +0000</pubDate><guid>/posts/2018-01-24-nixos-install-pains/</guid><description>The Back Story My first foray into world of Linux happened with Red Hat Linux 6 (original, not the enterprise one). It was magical but it didn't stick. See, I was a kid who liked video games. So it was back to Windows until I finally got serious about programming and discovered I the development environment on Linux. So I formatted my hard drive and installed Ubuntu. I quickly learned absorbed information and slowly got bored.</description></item><item><title>Implementing apply on tuples in Scala</title><link>/posts/2017-09-01-scala-tuple-apply/</link><pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate><guid>/posts/2017-09-01-scala-tuple-apply/</guid><description>One of the first things you learn as a newcomer to Scala is the difference between a list and a tuple: a list must be homogeneous but a tuple can be heterogeneous. That is all elements of a list must have the same types but a tuple can contain things of different types.
A direct consequence of this is that a list can define a by-index accessor and a tuple cannot.</description></item><item><title>Dockerless Services (with Nix)</title><link>/posts/2017-08-30-dockerless-services/</link><pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate><guid>/posts/2017-08-30-dockerless-services/</guid><description>So you want an &amp;ldquo;isolated&amp;rdquo; MySQL &amp;ldquo;service&amp;rdquo; but don't want to (or are not able to) run Docker/rkt/LXC/whatever?
Here are the tl;dr steps:
cd /tmp mkdir mysql-1 cd mysql-1 nix-shell -p mysql mysql_install_db --datadir=$(pwd) mysqld --datadir=$(pwd) --socket=$(pwd)/socket &amp;amp; mysqladmin -uroot -h127.0.0.1 password &amp;lt;REDACTED&amp;gt; mysql -uroot -p&amp;lt;REDACTED&amp;gt; -h127.0.0.1 ... Why? My motivation for this was running a database on a machine with a specially tuned kernel that did not support containers.</description></item><item><title>TDD-ing a toy sized project</title><link>/posts/2016-09-21-toy-sized-tdd/</link><pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate><guid>/posts/2016-09-21-toy-sized-tdd/</guid><description>Just recently I was porting a toy sized parser combinator library (a proof of concept) from Haskell to Python. You know, for educational purposes. It turns out I'm not smart enough to keep the complicated types (and explicit laziness) in my head even for such a small project. So my solution was to do TDD. To clarify: I wanted to test happy paths through my functions to make sure at least types fit together.</description></item><item><title>Repairing a corrupt Git repo using a clone</title><link>/posts/2016-02-24-git-repair/</link><pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate><guid>/posts/2016-02-24-git-repair/</guid><description>Quite recently I managed to make myself a corrupt git repository due to a file system failure. See, git stores everything in content addressable blobs - the file name of something is it's hash. Which lends itself nicely to checking repository integrity - it keeps out malicious attackers as well as my file system problems.
I already hear you saying: Why not just make a new clone, git is distributed anyway?</description></item><item><title>Lazy unary numbers</title><link>/posts/2015-05-03-unary-numbers/</link><pubDate>Sun, 03 May 2015 00:00:00 +0000</pubDate><guid>/posts/2015-05-03-unary-numbers/</guid><description>We are used to encoding numbers on computers in binary. Binary is the &amp;ldquo;simplest&amp;rdquo; base that yields logarithmic length though it may not be optimal. But can we do simpler? How about unary?
Unary is often used with Turing machines where we don't care for efficiency and I will assume this same stance. Let's forget about efficiency and explore what can unary numbers do that binary can't. Specifically lazy unary numbers as otherwise the systems are equivalent.</description></item><item><title>Cheap tagged types in Scala</title><link>/posts/2015-05-02-tagged-types/</link><pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate><guid>/posts/2015-05-02-tagged-types/</guid><description>Sometimes you want to distinguish between different types that have the same underlying representation. For example both UserId and ProductId could be represented by Long. The usual solution is to introduce wrappers in order to make the distinction safe.
case class UserId(id: Long) case class ProductId(id: Long) But this introduces runtime overhead of boxing and unboxing over and over which may add up in some cases. Luckily Scala 2.10 introduced value classes.</description></item><item><title>Approaches to designing a Haskell API</title><link>/posts/2014-10-05-haskell-apis/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>/posts/2014-10-05-haskell-apis/</guid><description>Recently I've been thinking about the design of programming interfaces, especially in Haskell. But don't let the title misguide you; this is not supposed to be a tutorial or a guide but simply an showcase of different styles. Feel free to tell me I'm wrong or missed something.
The problem Let's say we are writing an interface to RESTful web service. Our goal is to create type safe functions and descriptive models but all in all easy to use.</description></item><item><title>Static linking with GHC on ArchLinux</title><link>/posts/2014-05-03-ghc-arch-static/</link><pubDate>Sat, 03 May 2014 00:00:00 +0000</pubDate><guid>/posts/2014-05-03-ghc-arch-static/</guid><description>There are many reasons why to prefer dynamic linking to static but I'll not go through them. Sometimes you just want static linking, period. In my case it was to show that Go&amp;lsquo;s static executables without dependencies are not something special and other languages can do it as good as well - Haskell included. My compiler of choice is GHC and I'm running ArchLinux. More on why this is important later.</description></item><item><title>Coroutines for free</title><link>/posts/2014-04-14-free-coroutines/</link><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>/posts/2014-04-14-free-coroutines/</guid><description>Motivation My first run-in with coroutines was with Python's generators.
def ints(): i = 0 while True: yield i i += 1 This is a function that never returns. Instead it runs in an infinite loop over all natural numbers. But it yields every number. This means it actually stops and &amp;ldquo;returns&amp;rdquo; the number to the caller but is available for more execution. Kind-of like implementing an Iterator but the control flow is reversed.</description></item><item><title>Practical Future[Option[A]] in Scala</title><link>/posts/2014-03-07-practical-future-option/</link><pubDate>Fri, 07 Mar 2014 00:00:00 +0000</pubDate><guid>/posts/2014-03-07-practical-future-option/</guid><description>Motivation In real world concurrent code you often come across the Future[Option[A]] type(where A is usually some concrete type). And then you need to compose these things. This is not straightforward in Scala.
If you've done some Haskell just import scalaz._ and you can skip the rest of this article. Scalaz library defines a monad typeclass(and many others) that formally specifies what it means to be a monad(not &amp;ldquo;has a flatMap-ish thingy&amp;rdquo;).</description></item><item><title>Comparing Haskell Web Frameworks</title><link>/posts/2014-02-23-haskell-web/</link><pubDate>Sun, 23 Feb 2014 00:00:00 +0000</pubDate><guid>/posts/2014-02-23-haskell-web/</guid><description>Intro Lately I got sucked into Haskell. When I first saw it it looked like it might be a bit impractical for real-life projects but this prejudice faded away slowly. Now I'm at the point where I have an idea for a web application and I'd like to do it in Haskell. After a quick search I found many frameworks and libraries that I might use. So I decided to do some exploration and implement a bunch of stuff with different technologies.</description></item><item><title>Product and sum types (Go and Haskell)</title><link>/posts/2014-02-17-product-and-sum-types/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>/posts/2014-02-17-product-and-sum-types/</guid><description>Let's take a look at Go-language functions. They let you return more than one result. Like in
func foo(n int) (int, int) { return n+1, n+2 } This function foo returns two numbers. But does it really? Pairs(and tuples in general) aren't a first class citizen in Go. Yes you can return them from function and you can even return a result of a function that returns the same signature as you but then you must immediately bind each result to separate variable.</description></item><item><title>Hakyll</title><link>/posts/2014-01-08-hakyll/</link><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>/posts/2014-01-08-hakyll/</guid><description>Hello there. I think I'm gonna resurrect this blog as I feel like writing again. I kinda have a general dislike for PHP and don't like Wordpress. I tried mucking about with Github Pages, but I'm not a fan of Jekyll either. And then I forgot about this.
Haskell A few weeks ago I rediscovered Haskell. I tried learning it once before but gave up. And insisted in Scala. This time I believe I got past the hardest part of the learning curve.</description></item><item><title>Virtual machine in C++</title><link>/posts/2013-10-18-virtual-machine-cpp/</link><pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate><guid>/posts/2013-10-18-virtual-machine-cpp/</guid><description>This is not a tutorial. This post is a flashback I had today. It might be a bit fiction as my memory about events tends to be fuzzy at times. But I promise it at least resembles the real story. I was in elementary school and just found out about programming and was learning about c++. After reading &amp;ldquo;C++ na kolenih&amp;rdquo; by Goran Bervar I was empowered by knowledge and tried to do all sorts of projects.</description></item><item><title>Setting up for better Scala development on Android</title><link>/posts/2013-09-04-better-scala-android/</link><pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate><guid>/posts/2013-09-04-better-scala-android/</guid><description>I did a tutorial how to set up everything using IntelliJ a while ago. I still think IntelliJ IDEA is awesome and you should use it(it has a free and open version) but I've found a better way. No more clicking around in wizards&amp;hellip;it's config file time. Relax - it's quite simple. I recommend installing the Typesafe-stack. It gives you the two tools listed below in nice packaged form with updates.</description></item><item><title>750 words</title><link>/posts/2013-01-27-750-words/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>/posts/2013-01-27-750-words/</guid><description>This week I felt the impulse to express myself multiple times. I felt like writing. Being a bit sentimental I opened up a notepad I got from my girlfriend as a birthday present and began a brain dump. A stream of consciousness. But my handwriting is painfully slow. This means I had time to do reformatting and rewording in my mind. Sot this was definitely not a brain dump. I wasn't expressing my thoughts directly but rather doing some writing - I don't know how to put this subtle(but important) difference better.</description></item><item><title>Chaining implicit conversion in scala</title><link>/posts/2013-01-27-chaining-implicits/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>/posts/2013-01-27-chaining-implicits/</guid><description>Today I was hanging in the #scala IRC channel and somebody came along(forgot the nick, sorry) and asked about some compilation error. I deduced he was trying to chain implicit conversions. And this doesn't work. Else compilation would take forever and would also compile some wrong code by inserting long strings of implicits. But then somebody else responded(I think nick started with d) and gave a solution to implicit chaining. But I'm not giving it away yet, you'll have to read a bit more.</description></item><item><title>Generic singletons through dependent method types</title><link>/posts/2013-01-27-generic-singletons/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>/posts/2013-01-27-generic-singletons/</guid><description>Ever tried to write a generic singleton? It's an oxymoron of a sort. But sometimes my brain dreams up funny concepts to solve the problem at hand. Sadly I cannot remember what I wanted to use them for. Anyway I think I just made all the methods generic and solved it this way. But this doesn't really express the notion of one entity that's agnostic to type of the parameters. With generic methods you get a bunch of disconnected units - at least that's the picture in my head.</description></item><item><title>Monadic IO with ScalaZ</title><link>/posts/2013-01-27-monadic-io/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>/posts/2013-01-27-monadic-io/</guid><description>I just recently scratched the surface with scalaz. Think of it as an additional standard library for scala that's FP oriented. It provides a bunch of type classes, instances for pretty much everything, some fancy data types, pimps(Pimp My Library) for standard library collections, actor implementation and probably some stuff I'm not aware of. I could really use a &amp;ldquo;map of scalaz&amp;rdquo; - but I'll probably dive into source and scaladoc anyway.</description></item><item><title>Null-coalescing(??) in scala</title><link>/posts/2013-01-27-null-coalescing/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>/posts/2013-01-27-null-coalescing/</guid><description>I was doing my homework today(yes I am aware I should be enjoying myself on 30th December) and had some problems with concatenating possibly null strings in LINQ. Quick trip to StackOverflow and I find out C# has some funky operators that solve this in a (sort-of) clean way.
var outputString = input1 ?? &amp;#34;&amp;#34; + input2 ?? &amp;#34;&amp;#34;; I like type inference so I use var's extensively - please don't judge me.</description></item><item><title>Union types in scala</title><link>/posts/2013-01-27-union-types/</link><pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate><guid>/posts/2013-01-27-union-types/</guid><description>I've done some research a while ago on union types and found a nice implementation by Miles Sabin but it only works for declaring types of function parameters. And you can also do this with with type classes. What do I mean with &amp;ldquo;only function parameters&amp;rdquo;? In &amp;ldquo;everything is a function&amp;rdquo; kind of view there are three places to put types
function parameters value(val or let binding in haskell and the like) function return type Even though Miles&amp;rsquo; encoding with Curry-Howard isomorphism is ingenious it only applies to point 1.</description></item><item><title>Cool Monday - Exploration of dynamic db acces from scala</title><link>/posts/2012-12-10-dynamic-db/</link><pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate><guid>/posts/2012-12-10-dynamic-db/</guid><description>I use scala on Android and I don't like the integrated database API. It's very verbose and very stateful. I had written my own ORM(DAO would be a more appropriate tag) a while back, before I used scala but it's not enough anymore. So now I'm on a quest for a better database API. My dream is something small that handles schema for me and is type-safe. A nice DSL that is converted to SQL at compile time and does code generation.</description></item><item><title>Homework - functional style (outer sorting)</title><link>/posts/2012-12-04-hw-functional/</link><pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate><guid>/posts/2012-12-04-hw-functional/</guid><description>I'm attending Algorithms and data structures class this semester. Material it self is quite interesting and one TA is pretty cool too. But I don't like professor(makes whole experience very much worse) and I believe homeworks could be much better. Oh, and we didn't even mention functional approach&amp;hellip;you know Haskell, Scala and the like. All we do is imperative, C-style code in Java. Enough ranting. This is how it saw the bright side.</description></item><item><title>Cool Monday - Functional compilers and atoms</title><link>/posts/2012-11-26-functional-compilers/</link><pubDate>Mon, 26 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-26-functional-compilers/</guid><description>I've seen this great talk by Daniel Spiewak on Functional Compilers. He talks about lexical and semantic analysis in particular. First, problems with traditional lexing with scanner. You can only have regular tokens or you have do do some dirty hacking and backtrace the scanner therefore losing linearity. And you can solve this with scannerless parsing
putting regular expressions into your grammar. In fact this approach seems simpler to me, as the only proper parser I've done works this way.</description></item><item><title>Nomadic programming</title><link>/posts/2012-11-23-nomadic-programming/</link><pubDate>Fri, 23 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-23-nomadic-programming/</guid><description>DISCLAIMER: This is about my opinion. And may or may not contain some boasting. And is also a bit of a brain dump.
Yep, this is not a typo. Not monadic but nomadic. Although monads are cool too. A few days ago the CTO of a company I work for said it's time to specialize. He was talking about my career. Offering me a few things to try and then pick one.</description></item><item><title>Cool Monday - CERC and my trip to Krakow</title><link>/posts/2012-11-19-cerc/</link><pubDate>Mon, 19 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-19-cerc/</guid><description>This week's post is a bit different. Well very different. My team qualified for CERC ICPC(european programming contest) and that means a trip to Krakow, Poland. I plan on writing this in a journal style. A bit every day.
Friday, 11. am I got up at 6. to check news and read a bit before departing. And of course to charge my laptop and phone to 100% batter for the long trip.</description></item><item><title>Why Linux will never win the desktop</title><link>/posts/2012-11-17-y-u-no-linux/</link><pubDate>Sat, 17 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-17-y-u-no-linux/</guid><description>Don't get me wrong, I'm a huge linux fan. I use it on all my machines(even my phone, Android is basically linux) and even converted my sister and a few friends. But if you don't convert somebody, chance they'll try a new operating system is slim to none. Only geeks like me install funky stuff as their primary software just to try it. But the major problem lies somewhere else. People hate making choices.</description></item><item><title>Cool Monday - Scala Macros</title><link>/posts/2012-11-12-scala-macros/</link><pubDate>Mon, 12 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-12-scala-macros/</guid><description>For me the highlight of this week was discovering Bootstrap. I heard of it before but never looked into it. Probably because I wasn't doing web stuff. The thing is bloody awesome. Back on topic.
Scala 2.10 RC2 was released this Friday. Considering 2.9 had 3 RC releases, 2.10 final is probably quite near. And it brings some awesome features. One2 of them are macros
Macros So what are macros basically?</description></item><item><title>Cool Monday - Hindley-Milner on a dynamic language</title><link>/posts/2012-11-05-hindley-milner/</link><pubDate>Mon, 05 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-05-hindley-milner/</guid><description>So I'm getting into type theory. Slowly. Note to self: read a proper book on this topic. I'm getting familiar with it through some practical applications. Namely scala and haskell. That same discussion about design patterns also included dynamic vs static typing. And I asked twitter about it. HairyFotr linked this amazing talk about type inference to me. Basically there are two conclusions to be drawn
Every static typed language should have at least limited type inference.</description></item><item><title>Hunt for a web framework that works</title><link>/posts/2012-11-02-web-framework/</link><pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate><guid>/posts/2012-11-02-web-framework/</guid><description>I have this personal project I want to do that includes a web application and I want to learn something. So I'm on the hunt for language, environment and framework.
Other stuff I did some PHP a few years back and definitely don't want to go there anymore. I also did some .NET and it's even part of curriculum here at FRI. But clicking on wizards in Visual Studio feels weird to me.</description></item><item><title>Cool Monday - HList and Shapeless</title><link>/posts/2012-10-29-hlist-shapeless/</link><pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate><guid>/posts/2012-10-29-hlist-shapeless/</guid><description>HList as in heterogenous lists. This means every element is of different type. Yeah sure, just list List in Java, but that is in no way typesafe. I want compiler to know the type of every element and stop me if I try to do something silly.
Linked lists to the rescue So what's a linked list anyway? A sequence of nodes with pointers to next. And a nice implementation(still talking Java here) would be generic to allow type-safety for homogeneous lists.</description></item><item><title>Design patterns are bullshit!</title><link>/posts/2012-10-29-design-patterns-bullshit/</link><pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate><guid>/posts/2012-10-29-design-patterns-bullshit/</guid><description>It all started Monday morning at college. Professor of Information Systems was talking about evolution of programming techniques and at the end of the chain was OOP. The pinnacle of program design. Well, no. Even professor admitted that OOP failed to deliver. (No word on FP though, I was kinda disappointing). This made me think about problems ofJava and the like. Some hours later I'm sitting in cafe Metropol above Kiberpipa having tea with some friends - freshmen from FRI.</description></item><item><title>Setting up for scala development on Android</title><link>/posts/2012-10-22-scala-android/</link><pubDate>Mon, 22 Oct 2012 00:00:00 +0000</pubDate><guid>/posts/2012-10-22-scala-android/</guid><description>I've been developing for android more than a year now and a few months in scala. So naturally I wanted to combine the two. But it's not dead simple. This is kinda a tutorial an a reference if I ever forget how to do this. It took me a few days to figure it all out. I tried maven, ant with special config and sbt(I need to learn more about this one) but in the end I just wanted fast solution integrated into my IDE.</description></item><item><title>Javascript faster than light! (well C actually)</title><link>/posts/2012-10-21-javascript-ftl/</link><pubDate>Sun, 21 Oct 2012 00:00:00 +0000</pubDate><guid>/posts/2012-10-21-javascript-ftl/</guid><description>Disclaimer: I never was a fan of js, but I've come to think it's quite AWESOME!
Anyway I invented my own toy language scrat recently. And I now I want it to go fast and do cool stuff. So I went on to compile it. Well more appropriate term would be &amp;ldquo;translate&amp;quot;(as zidarsk8 pointed out) since my target is JavaScript. And then I use node.js to run it - browser test sometime in the future.</description></item><item><title>Making a programming language Part 7b - using objects</title><link>/posts/2012-10-08-creating-a-language-7b/</link><pubDate>Mon, 08 Oct 2012 00:00:00 +0000</pubDate><guid>/posts/2012-10-08-creating-a-language-7b/</guid><description>Table of contents, Whole project on github
Something like EPIC FAIL occured to me and I published a post containing only half the content I intended to write. So I'm doing a part b.
My intended usage of objects is something along the lines of
objectName.someProperty objectName.someFunction() someFunction().someProperty someObject.someProperty.someFunction().someProperty.someFunction Explanation
getting a value from an object invoking a function contained in an object getting a value from returned object of the invoked function a bit contrived example.</description></item><item><title>Making a programming language Part 8 - going faster</title><link>/posts/2012-09-29-creating-a-language-8/</link><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-29-creating-a-language-8/</guid><description>Table of contents, Whole project on github
First of all, I wrote some tests for scrat. That was a bit challenging to get started. How do you test a language? I decided to write a bunch of programs that exercise and combine different language features. And then stare into code until I was absolutely sure they are correct. That's the problem with implementing a new language, nobody can tell you if your code is correct but your software, but you don't even know if software is correct.</description></item><item><title>Making a programming language Part 7a - objects</title><link>/posts/2012-09-27-creating-a-language-7a/</link><pubDate>Thu, 27 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-27-creating-a-language-7a/</guid><description>Table of contents, Whole project on github
My goal in this post is for this to compile
func create(n){this} and a call to it to return a reference to an object that contains &amp;ldquo;n&amp;rdquo;. Functions are a bit different from the rest of the language. Not by implementation or usage but by thought process behind designing them. I actually thought about objects and functions before implementing any of them. Considering my implementation of scopes(which I like) and shadowing I got this great idea that functions, scopes and objects are just many faces of the same thing.</description></item><item><title>Making a programming language Part 6 - functions</title><link>/posts/2012-09-25-creating-a-language-6/</link><pubDate>Tue, 25 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-25-creating-a-language-6/</guid><description>Table of contents, Whole project on github
Long overdue, I'm finally writing about the most interesting part - user defined functions. Objects should be in the next post as they are a natural extension of what I'm about to do. And because I'm to lazy to write a post that long.
What's a function? A function is something that takes parameters and returns a result. And I'm opting for side-effects as this is simpler to get something working that doing the whole referential transparency and IO monad(Haskell).</description></item><item><title>Power sets</title><link>/posts/2012-09-21-power-sets/</link><pubDate>Fri, 21 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-21-power-sets/</guid><description>It all started out when a friend of mine(check him out) told me a story about someone having an interview at Google. He was live coding and asked to implement a function that computes a power set of a given set. He totaly over-engineered it and after an hour of fiddling came up with 4-liner in python. Ok. Big deal. How hard can it be? I immediately started to brainstorm a solution of my own(and Matevž helped).</description></item><item><title>Pretty function composition in scala and asynchronous function composition on android</title><link>/posts/2012-09-17-composition/</link><pubDate>Mon, 17 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-17-composition/</guid><description>Surjective composition: the first function need not be surjective. (Photo credit: Wikipedia)
Function composition is a nice way to sequence transformations on data. For example in a compiler you take your source, parse, check, optimize and generate code(in a nutshell). It's a linear series of transformations -&amp;gt; perfect for function composition In Haskell you can use this beautiful syntax
compile = codegen . optimize .check . parse leaving out the parameters and noting composition as &amp;ldquo;.</description></item><item><title>Making a programming language Part 5 - variables and decisions</title><link>/posts/2012-09-02-creating-a-language-5/</link><pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-02-creating-a-language-5/</guid><description>Table of contents, Whole project on github
In Part 4 I managed to create a Hello World. What's the next program after this in every programming tutorial? A program that asks your name and greets you. Greeter perhaps?
Reading from standard input in pretty trivial, just wrapping up readLine function from scala, see previous post on how this is done. And I called this function readln.
Variables I could cheat a bit and write something like this</description></item><item><title>Making a programming language Part 4 - Hello World</title><link>/posts/2012-09-01-creating-a-language4/</link><pubDate>Sat, 01 Sep 2012 00:00:00 +0000</pubDate><guid>/posts/2012-09-01-creating-a-language4/</guid><description>Table of contents, Whole project on github
What good is a language if you cannot do a Hello World program. Every tutorial on every language I ever read has a Hello World in it somewhere, even if it's a convoluted and sarcastic one.
So what do I need?
a way to print stuff to console  strings In that order. Since this is more of a math lang for now my first hello world can just print 1 - arguably the simplest number.</description></item><item><title>Making a programming language Part 3 - adding features</title><link>/posts/2012-08-31-creating-a-language3/</link><pubDate>Fri, 31 Aug 2012 00:00:00 +0000</pubDate><guid>/posts/2012-08-31-creating-a-language3/</guid><description>Table of contents, Whole project on github
So now I have a repl that can evaluate stuff like
(2+3)*(7/2-1) Not much of a programming language
more like a calculator, and not even a good one. Lets add some features! Constants Like pi, e and such. I have to change the grammar to match identifiers too.
Now I have
private def factor: Parser[Expression] = number | (&amp;#34;(&amp;#34; ~&amp;gt; expr &amp;lt;~ &amp;#34;)&amp;#34;) And I change that to</description></item><item><title>Making a programming language Part 2 - something that kinda works</title><link>/posts/2012-08-30-creating-a-language-2/</link><pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate><guid>/posts/2012-08-30-creating-a-language-2/</guid><description>Table of contents, Whole project on github, relevant version on github
In the Part 1 I posted a working repl(read-eval-print-loop) for simple math expressions but I kinda cheated and only explained how I built the AST.
AST elements Just scala case classes
sealed trait Expression case class Number(n: Double) extends Expression case class Add(left: Expression, right: Expression) extends Expression case class Subtract(left: Expression, right: Expression) extends Expression case class Multiply(left: Expression, right: Expression) extends Expression case class Divide(left: Expression, right: Expression) extends Expression Parser combinators revisited I use power of scala library to cheat a bit and do lexing and parsing in one step.</description></item><item><title>Making a programming language Part 1 - how to start</title><link>/posts/2012-08-29-creating-a-language-1/</link><pubDate>Wed, 29 Aug 2012 00:00:00 +0000</pubDate><guid>/posts/2012-08-29-creating-a-language-1/</guid><description>Table of contents Part 1 - how to start (this article) Part 2 - something that kinda works Part 3 - adding features Part 4 - Hello World Part 5 - variables and decisions Part 6 - user defined functions Part 7a - constructors and objects Part 7b - using objects Part 8 - going faster Source version for this post Lately I gained some interest in programming languages and compilers.</description></item><item><title>About me</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>My name is Andraz and I work as a software engineer. Sometimes writing code (mostly Go) but mostly telling others what and how to write. But more importantly I'm a curious human. And when I feel like it I write about my explorations here on this blog.
In my free time I'm often playing around with various statically-typed functional programming &amp;ldquo;things&amp;rdquo;. But work has also led me in the direction of distributed systems and low latency which both turned out of great interest as well.</description></item></channel></rss>